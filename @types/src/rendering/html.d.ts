/**
 * Processes a tagged template literal and returns an HTML element.
 *
 * @param {TemplateStringsArray} strings - Template literal strings.
 * @param {...*} values - Template literal values.
 * @returns {HTMLElement | Text} The created HTML element.
 */
export function html(strings: TemplateStringsArray, ...values: any[]): HTMLElement | Text;
/**
 * Creates an HTML element from an AST structure.
 *
 * @param {Object} structure - The AST structure representing the element.
 * @returns {HTMLElement | Text} The created HTML element.
 */
export function createElement(structure: any, trackedStates: any): HTMLElement | Text;
/**
 * Makes a component reactive by tracking state changes and updating the DOM accordingly.
 *
 * @param {Function} htmlFn - A function that returns the HTML structure of the component.
 *                            The function should reference reactive states which trigger re-renders.
 * @returns {HTMLElement} The DOM element or structure generated by the provided HTML function.
 *
 * @example
 * // Define a component using reactive state
 * export default function SomeComponent() {
 *   const [userName, setUserName] = useState('Kizz');
 *
 *   const SomeElement = () => html`
 *     <div>
 *       <h1>${userName}</h1>
 *       <input
 *         type="text"
 *         value="${userName}"
 *         onChange="${(e) => setUserName(event.target.value)}" />
 *     </div>`;
 *
 *   return reactive(SomeElement);
 * }
 */
export function reactive(htmlFn: Function): HTMLElement;
/**
 * Renders a list of items using the provided render function.
 *
 * @param {Object} props - The props object for the List component.
 * @param {string} props.ref - The reference to the target element where the list should be rendered.
 * @param {any} props.items - The array of items to be rendered in the list.
 * @param {function} props.render - The function to render each item in the list. It should return a valid html element.
 * @returns {Object} - An object containing metadata about the list, including the type, reference, unique ID, and render function, this is used internally to render the list after the initial render.
 */
export function List(props: {
    ref: string;
    items: any;
    render: Function;
}): any;
/**
 * Retrieves the DOM element referenced by the provided `ref` string.
 *
 * @param {string} ref - The reference string to the target DOM element.
 * @returns {HTMLElement|null} - The DOM element if found, or `null` if not found.
 */
export function getRef(ref: string): HTMLElement | null;
